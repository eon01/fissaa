
Parameters:
  DomainCertificateStackName:
    Type: String
    Description: stack contains domains certificates

Resources:
  PublicLoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId:
        Fn::ImportValue: !Join [ ":", [ "Vpc-Stack", "Vpc" ] ]
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
  PublicLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
#    DependsOn: GatewayAttachement
    Properties:
      Scheme: internet-facing
      Subnets:
        - Fn::ImportValue: !Join [":", ["Network-Stack", "PublicSubnetOne"]]
        - Fn::ImportValue: !Join [":", ["Network-Stack", "PublicSubnetTwo"]]
      SecurityGroups:
        - !Ref PublicLoadBalancerSecurityGroup
  PublicLoadBalancerListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    DependsOn:
      - PublicLoadBalancer
    Properties:
      DefaultActions:
        - Type: "redirect"
          RedirectConfig:
            Protocol: "HTTPS"
            Port: "443"
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 80
      Protocol: HTTP
  HttpsPublicLoadBalancerListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    DependsOn:
      - PublicLoadBalancer
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: "text/html"
            MessageBody: "Not Found"
            StatusCode: 404
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn:
            Fn::ImportValue: !Join [ ":", [ !Ref "DomainCertificateStackName", "Certificate" ] ]
  ECSCluster:
    Type: 'AWS::ECS::Cluster'

  ECSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Access to the ECS containers
      VpcId:
        Fn::ImportValue: !Join [ ":", [ "Vpc-Stack", "Vpc" ] ]
  ECSSecurityGroupIngressFromPublicALB:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Allow access to container from ALB
      GroupId: !Ref ECSSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref PublicLoadBalancerSecurityGroup
  
  ECSSecurityGroupIngressFromSelf:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref ECSSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref ECSSecurityGroup
  ECSRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:AttachNetworkInterface'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:CreateNetworkInterfacePermission'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:DeleteNetworkInterfacePermission'
                  - 'ec2:Describe*'
                  - 'ec2:DetachNetworkInterface'
                  - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
                  - 'elasticloadbalancing:DeregisterTargets'
                  - 'elasticloadbalancing:Describe*'
                  - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
                  - 'elasticloadbalancing:RegisterTargets'
                  - "ssmmessages:CreateControlChannel"
                  - "ssmmessages:CreateDataChannel"
                  - "ssmmessages:OpenControlChannel"
                  - "ssmmessages:OpenDataChannel"



                Resource: '*'
  ECSTaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                  - 'logs:PutLogEvents'
                  - 'xray:PutTraceSegments'
                  - 'xray:PutTelemetryRecords'
                  - 'xray:GetSamplingRules'
                  - 'xray:GetSamplingTargets'
                  - 'xray:GetSamplingStatisticSummaries'
                  - 's3:GetObject'
                  - 's3:GetBucketLocation'
                Resource: '*'
                

Outputs:
  ClusterName:
    Description: The name of the ECS cluster
    Value: !Ref ECSCluster
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", "ClusterName"]]
  
  ElbDnsName:
    Description: The url of the external load balancer
    Value: !GetAtt PublicLoadBalancer.DNSName
    Export:
      Name: !Join
        - ':'
        - - !Ref 'AWS::StackName'
          - ElbDnsName
  ElbHostedZoneId:
    Description: The url of the external load balancer
    Value: !GetAtt PublicLoadBalancer.CanonicalHostedZoneID
    Export:
      Name: !Join
        - ':'
        - - !Ref 'AWS::StackName'
          - ElbHostedZone
  ExternalUrl:
    Description: The url of the external load balancer
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt PublicLoadBalancer.DNSName
    Export:
      Name: !Join
        - ':'
        - - !Ref 'AWS::StackName'
          - PublicLoadBalancer
  
  LoadBalancer:
    Description: The url of the external load balancer
    Value: !Ref PublicLoadBalancer
    Export:
      Name: !Join
        - ':'
        - - !Ref 'AWS::StackName'
          - PublicLoadBalancerArn
  
  ECSRole:
    Description: The ARN of the ECS role
    Value: !GetAtt ECSRole.Arn
    Export:
      Name: !Join
        - ':'
        - - !Ref 'AWS::StackName'
          - ECSRole
  ECSTaskExecutionRole:
    Description: The ARN of the ECS role
    Value: !GetAtt ECSTaskExecutionRole.Arn
    Export:
      Name: !Join
        - ':'
        - - !Ref 'AWS::StackName'
          - ECSTaskExecutionRole
  PublicListener:
    Description: The ARN of the public load balancer's Listener
    Value: !Ref PublicLoadBalancerListener
    Export:
      Name: !Join
        - ':'
        - - !Ref 'AWS::StackName'
          - PublicListener
  HttpsPublicListener:
    Description: The ARN of the public load balancer's Listener
    Value: !Ref HttpsPublicLoadBalancerListener
    Export:
      Name: !Join
        - ':'
        - - !Ref 'AWS::StackName'
          - HttpsPublicListener
  ECSSecurityGroup:
    Description: A security group used to allow ECS containers to receive traffic
    Value: !Ref ECSSecurityGroup
    Export:
      Name: !Join
        - ':'
        - - !Ref 'AWS::StackName'
          - ECSSecurityGroup
