Parameters:
  StackName:
    Type: String
    Description: The name of the networking stack that
      these resources are put into.
  HostedZoneId:
    Type: String
    Description: name of domain stack
  ServiceName:
    Type: String
    Description: A human-readable name for the service.
  HealthCheckPath:
    Type: String
    Default: /
    Description: Path to perform the healthcheck on each instance.
  HealthCheckIntervalSeconds:
    Type: Number
    Default: 180
    Description: Number of seconds to wait between each health check.
  ImageUrl:
    Type: String
    Description: The url of a docker image that will handle incoming traffic.
  ContainerPort:
    Type: Number
    Default: 80
    Description: The port number the application inside the docker container
      is binding to.
  ContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU.
  ContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container.
  Domain:
    Type: String
    Description: the domain of your app
  DesiredCount:
    Type: Number
    Default: 1
    Description: How many copies of the service task to run.
  Priority:
    Type: Number

Resources:
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: myLogGroup
    Properties:
      Family: !Ref "ServiceName"
      Cpu: 512
      Memory: 2048
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn:
        Fn::ImportValue: !Join [":", [!Ref "StackName", "ECSTaskExecutionRole"]]
      TaskRoleArn:
        Fn::ImportValue: !Join [ ":", [ !Ref "StackName", "ECSTaskExecutionRole" ] ]
      ContainerDefinitions:
        - Name: xray-daemon
          Image: amazon/aws-xray-daemon
          Cpu: 32
          MemoryReservation: 256
          PortMappings:
            - ContainerPort: 2000
              Protocol: udp
        - Name: !Ref "ServiceName"
          Cpu: !Ref "ContainerCpu"
          Memory: !Ref "ContainerMemory"
          image: !Ref "ImageUrl"
          PortMappings:
            - ContainerPort: !Ref "ContainerPort"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: !Ref myLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref "ServiceName"
  
  
  myLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref "ServiceName"
      RetentionInDays: 7

  Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerRule
    Properties:
      ServiceName: !Ref "ServiceName"
      Cluster:
        Fn::ImportValue: !Join [":", [!Ref "StackName", "ClusterName"]]
      LaunchType: FARGATE
      DeploymentConfiguration:
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: !Ref "DesiredCount"
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Fn::ImportValue:
                !Join [":", [!Ref "StackName", "ECSSecurityGroup"]]
          Subnets:
            - Fn::ImportValue:
                !Join [":", [!Ref "StackName", "PublicSubnetOne"]]
            - Fn::ImportValue:
                !Join [":", [!Ref "StackName", "PublicSubnetTwo"]]
      TaskDefinition: !Ref "TaskDefinition"
      LoadBalancers:
        - ContainerName: !Ref "ServiceName"
          ContainerPort: !Ref "ContainerPort"
          TargetGroupArn: !Ref "TargetGroup"
      EnableExecuteCommand: true
  
  
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: !Ref "HealthCheckIntervalSeconds"
      HealthCheckPath: !Ref "HealthCheckPath"
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 20
      HealthyThresholdCount: 2
      TargetType: ip
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue: !Join [":", [!Ref "StackName", "VPCId"]]
  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref "TargetGroup"
          Type: "forward"
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !Join [".", ["www", !Ref "Domain"]]
              - !Ref "Domain"
      ListenerArn:
        Fn::ImportValue: !Join [":", [!Ref "StackName", "HttpsPublicListener"]]
      Priority: !Ref "Priority"
  
  DomainRecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref "HostedZoneId"
      RecordSets:
        - Name: !Ref "Domain"
          Type: "A"
          AliasTarget:
            DNSName:
              Fn::ImportValue: !Join [":", [!Ref "StackName", "ElbDnsName"]]
            HostedZoneId:
              Fn::ImportValue: !Join [":", [!Ref "StackName", "ElbHostedZone"]]
