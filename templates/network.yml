AWSTemplateFormatVersion: 2010-09-09
Description: >-
  A network stack for deploying containers in AWS ECS. This stack creates a VPC
  with two public subnets and a loadbalancer to balance traffic between those
  subnets. Derived from a template at
  https://github.com/nathanpeck/aws-cloudformation-fargate.

Resources:
  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: { Ref: "AWS::Region" }
      VpcId:
        Fn::ImportValue: !Join [ ":", [ "Vpc-Stack", "Vpc" ] ]
      CidrBlock: "10.0.105.0/24"
      MapPublicIpOnLaunch: true
  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: { Ref: "AWS::Region" }
      VpcId:
        Fn::ImportValue: !Join [ ":", [ "Vpc-Stack", "Vpc" ] ]
      CidrBlock: "10.0.106.0/24"
      MapPublicIpOnLaunch: false
  PublicSubnetOne:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        'Fn::Select':
          - 0
          - 'Fn::GetAZs':
              Ref: 'AWS::Region'
      VpcId:
        Fn::ImportValue: !Join [":", ["Vpc-Stack", "Vpc"]]
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
  PublicSubnetTwo:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        'Fn::Select':
          - 1
          - 'Fn::GetAZs':
              Ref: 'AWS::Region'
      VpcId:
        Fn::ImportValue: !Join [":", ["Vpc-Stack", "Vpc"]]
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
  
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
  
  GatewayAttachement:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId:
        Fn::ImportValue: !Join [":", ["Vpc-Stack", "Vpc"]]
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId:
        Fn::ImportValue: !Join [":", ["Vpc-Stack", "Vpc"]]
  PublicSubnetOneRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetTwoRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

Outputs:
  PublicSubnetOne:
    Description: Network PublicSubnetOne
    Value: !Ref PublicSubnetOne
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", "PublicSubnetOne" ] ]
    
  PublicSubnetTwo:
    Description: Network PublicSubnetTwo
    Value: !Ref PublicSubnetTwo
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", "PublicSubnetTwo" ] ]
      
  PrivateSubnetOne:
    Description: Network PrivateSubnetOne
    Value: !Ref PrivateSubnetOne
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", "PrivateSubnetOne"]]
      
  PrivateSubnetTwo:
    Description: Network PrivateSubnetTwo
    Value: !Ref PrivateSubnetTwo
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", "PrivateSubnetTwo" ] ]
      
